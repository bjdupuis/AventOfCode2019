package `2019`

import org.jgrapht.alg.shortestpath.DijkstraShortestPath
import org.jgrapht.graph.DefaultUndirectedWeightedGraph
import org.jgrapht.graph.DefaultWeightedEdge

fun main(args: Array<String>) {
    val input = """
                                         W     P     B       T           P   K                                             
                                         L     W     W       Z           S   S                                             
  #######################################.#####.#####.#######.###########.###.###########################################  
  #.........#.............#...#.#...#.#.......#.#.#.........#.#...#...#.....#...#.............#...#...#.....#...#...#.#.#  
  #####.#######.#.#######.#.###.###.#.###.#.#.#.#.###.#######.#.#####.#####.#.###.#####.#.###.###.#.###.###.###.#.###.#.#  
  #...........#.#.#.....#.#.#.#.#.#.....#.#.#.#.....#.....#.....#...#.......#.........#.#.#...#.....#.....#.#...#.....#.#  
  #.###.#.#.#####.###.#.#.#.#.#.#.#.#.#.###.#####.###.#####.###.#.###.#.#####.#########.#.#######.###.###.#####.#.#.###.#  
  #.#...#.#.#.#...#...#...........#.#.#.......#...#.....#.#.#.....#...#.#...#.....#...#.#.#.....#...#.#.#.#...#...#.#...#  
  ###.###.###.#########.###.#.###.###.#####.#####.#.#.###.###.###.###.###.#.#.###.#.#######.#####.###.#.###.#####.#####.#  
  #.#.#.#.....#.#...#.#.#...#.#...........#.#.....#.#.#.#.#...#.#.#.......#.#.#...#.#.#...#...#.....#.#.#.......#...#...#  
  #.###.###.###.###.#.#####.###.#.###.###.#####.#####.#.#.###.#.###.#######.#.#####.#.###.#.#####.###.#.#.###.###.#####.#  
  #.#.#.......#...............#.#.#.....#.#.....#...#.......#...#.#.#.....#.#...#...#.#.....#...#.#...#...#...#...#.....#  
  #.#.#.###.###.#######.#.#.#########.#####.#.###.#####.#.###.###.#####.#.#.#.#####.#.#.#####.###.#.###.#########.###.###  
  #.......#...#.#.....#.#.#...#.#...#...#...#.....#.#...#.#.........#...#...#.#.................#.......#.#.#.......#...#  
  #.###.#.#########.#####.#####.###.#.#####.#.#.###.#.#.#######.#######.#.###.#####.###.#.#######.#######.#.#####.###.###  
  #...#.#...#.#.....#.......#.....#.#...#.#.#.#.....#.#.#.#.....#.#.....#.#...#.#.....#.#.#.#.....#.......#.#.....#...#.#  
  #.###.#####.#####.#.###.#######.#.###.#.###.#.###.#.###.###.#.#.###.###.###.#.###.#######.###.#####.#####.#.#######.#.#  
  #.#.#.#.....#.#...#.#.#.#.#.....#.#.....#...#.#...#.......#.#.#.#.#...#.#.#.#.....#...#.#.......#.#.#.#.#.#...#.....#.#  
  #.#.#####.###.###.###.###.###.#.#.#.###.#########.###.#######.#.#.###.###.#.#.#.#.#.###.###.###.#.#.#.#.#.#.###.#####.#  
  #.#...#.....#.........#.....#.#.#.....#.#...#.....#.......#.....#.......#.....#.#.#.#...#.....#.#.......#.#...#.#.....#  
  #.#.#####.#.#.###.###.#####.###.#.#.#####.#######.#.#######.#######.#.###.###.#####.#.###.#.#.#.###.#.###.#.###.#.###.#  
  #.#.......#.#.#.#.#.#...#.#.......#.#.#.....#.#...#.#.....#.....#...#.#...#...#...........#.#.#.#.#.#.#...#...#.....#.#  
  #.#.#.#########.###.#.###.#########.###.#.###.#.###.#.###.###.###.#.#####.###.#.#.#####.#.###.###.#.#####.#.#####.#####  
  #.#.#.#.......#.....#.#.....#...#.....#.#...#.#.#.#...#.#.#.....#.#.....#.#...#.#.#.#.#.#...#.....#...#...#.#...#.#.#.#  
  #.###.#.###########.#.#.###.###.#####.#.#.###.#.#.#.###.#.#.#####.###.#######.#.#.#.#.###########.#.#####.#.#.###.#.#.#  
  #...#.....#...#.#.#.....#.#.#.......#...#...#.....#...#...#.#...#.#.....#.#...#.#.#.....#.#.....#.#.......#...#...#...#  
  #.###.#.#####.#.#.###.#.#.#####.#.#######.###.###.#.###.###.#.#.###.#####.###.#.#.#.###.#.#####.#.#.#.###.#.#.###.#.###  
  #.#.#.#...#...#.......#.#.#.....#.........#.#.#...#.#...#.#...#...#.#...#...#.#.#...#.#.....#...#.#.#...#.#.#.........#  
  #.#.#.#######.#####.#.###.#######.#.#####.#.#.###.#.###.#.#######.#.#.#.#.###.#.#.#.#.#########.#####.#.#.#####.###.#.#  
  #.......#...#.#.#.#.#.....#.#...#.#.....#.#...#.#.#.#.....#.....#.#.#.#...#.....#.#.......#.#.......#.#.#.#...#.#...#.#  
  ###.#.###.###.#.#.#.#####.#.#.#.#.#####.#######.#.###.#.#.#.#.###.#.###.#####.###.###.###.#.#.#.#.#.#.#####.###.#####.#  
  #...#.#.........#.#.#...#.#...#...#.......#.........#.#.#.#.#.....#.........#.#...#...#...#...#.#.#.#...#.#...#...#.#.#  
  ###.#######.#.###.#.###.###########.###########.#########.#.#########.#########.###########.#####.#.###.#.#.###.###.###  
  #.......#.#.#...#.#...#.#.....#    N           E         R T         O         F        #.#...#...#.#.......#.#...#.#.#  
  #######.#.#####.#.#.###.#####.#    O           I         I T         O         Y        #.#.#########.###.###.#.###.#.#  
  #.#.......................#.#.#                                                         #.#.#.#.#...#.#.............#.#  
  #.#.#######.#####.#.#.#.###.#.#                                                         #.#.#.#.#.#.#####.#########.#.#  
IP..#.....#.....#...#.#.#...#.#.#                                                         #.#...#.#.#...#.#.........#...#  
  #.#####.#.#.#.###.#######.#.#.#                                                         #.#.###.###.###.#####.#.#####.#  
  #.....#.#.#.#.#...#.........#..YL                                                     IH........#.#...#.#...#.#...#.#..CI
  #.#####.#########.#########.#.#                                                         #.#####.#.#.#.#.#.#.###.###.#.#  
  #.......#...#.#.#.#.#.#.#.....#                                                         #.#.........#.....#.....#.#.#.#  
  #####.###.###.#.###.#.#.#######                                                         #####################.###.#.###  
  #.#.#.#.....#.....#.........#.#                                                         #.......#...........#.#.....#.#  
  #.#.###.#.#####.#######.###.#.#                                                         #.#####.#.#####.###.###.###.#.#  
UI....#.#.#.#.#.....#.#.#...#...#                                                         #.#.#.#.....#.....#.#.....#....TB
  #.###.###.#.###.###.#.###.###.#                                                         #.#.#.###.#########.###.#.#####  
  #.#...#.........#...#...#.#....UA                                                     UI........#...#...#.....#.#.....#  
  #.###.#####.###.#.###.#.#.#.###                                                         #.#######.###.#######.#######.#  
AU............#.........#...#....FQ                                                       #.#...#.#...#.#...............#  
  ###.#.#.#.#.#####.#############                                                         #####.#.#####.###.#.#.#.#####.#  
OO..#.#.#.#.#.#.#...#.......#...#                                                         #.#.....#.......#.#.#.#.#...#.#  
  #.#####.#####.###.#.#.#.###.#.#                                                         #.#.#.###.#.#.#######.###.###.#  
  #...#...#.#.#...#.#.#.#.....#.#                                                       TZ..#.#.#...#.#...#.#.#.#...#.#.#  
  #.###.#.#.#.#.#######.#######.#                                                         #.#.#.#.###.#####.#.#####.#.###  
  #...#.#.#.........#.....#.#....IP                                                       #...#.#...#...#.#.......#...#..UA
  ###.#####.#####.#####.###.###.#                                                         #####.###.#.###.###.#.###.#.#.#  
  #.#.......#.#.#.......#.....#.#                                                         #.#.#.....#.........#.....#...#  
  #.#########.#.#############.###                                                         #.#.#########################.#  
  #...........#.........#.......#                                                       RL..#.......#...............#.#.#  
  #.###.#.###.#.#.#####.#.#####.#                                                         #.#.#####.###.#.###.#.###.#.###  
FY..#...#.#.....#.#...#.....#....AU                                                       #.#...#.......#.#.#.#.#.#.....#  
  #.#########.#######.###########                                                         #.#.#######.#.###.#####.#.#.###  
  #...#.....#.#.#.......#.......#                                                         #.#.......#.#...#.#.....#.#.#..PH
  #####.#######.#.#.#.###.#####.#                                                         #.#.#.###########.###.#.#.###.#  
  #.#...#.#...#.#.#.#...#...#....PS                                                       #...#.#.....#.#...#.#.#.#.....#  
  #.###.#.#.###.###.#.#.#.#.#####                                                         #######.#####.###.#.###.#######  
  #...#...#...#...#.#.#.#.#.....#                                                         #.....................#.......#  
  #.###.###.#.#.#.#.###.###.#####                                                         #.#####.###.#####.###.#.###.###  
FQ..........#...#.....#.....#.#.#                                                       WL....#.....#.#.#...#...#.#...#..RL
  #####################.###.#.#.#                                                         #.#####.###.#.#######.#.#.###.#  
EI....#.#.#...#.......#.#.#.#.#.#                                                         #.#.#.....#.#...#.#.....#...#.#  
  ###.#.#.#.#.#.###.#####.###.#.#                                                         ###.#.#.#####.###.###.#####.#.#  
  #.........#.....#..............TP                                                       #.#.#.#.#.#.......#.#...#.....#  
  #.#.#########.#.#.#.#.###.###.#                                                         #.#.#####.###.#####.###########  
  #.#.#.....#...#.#.#.#.#...#.#.#                                                       CI....#.........#.#.....#...#.#.#  
  #####.###.###############.#.###                                                         ###.#.###.###.#.#.#.#####.#.#.#  
RI....#.#.#.#.#.#.....#.#.#.#...#                                                         #...#.#...#.......#...#.#.#.#.#  
  #.###.#.#.#.#.#####.#.#.#####.#                                                         #.###.###.#####.#.###.#.#.#.#.#  
  #...#...#...#.#.#.#.#...#.#...#                                                         #.....#.#...#...#.#...........#  
  #.#####.###.#.#.#.#.#.###.#.#.#                                                         #.#.###.#.#######.#.#.#.#.#####  
AA..........#.................#..KS                                                       #.#...#.....#.....#.#.#.#......ZS
  #.###.###.#.###.#.###.###.###.#                                                         #.#.###.#####.###.#.###.###.###  
  #.#.....#.#.#.#.#...#.#.....#.#                                                         #.#...#.....#.#...#.#...#.....#  
  #.###.#####.#.#####.#########.#    T             Z     P         Z       E     B P      ###.#########.#.###.#.#####.#.#  
  #...#.....#.....#...#.........#    B             E     H         S       M     W W      #.#...#...#...#.#...#.#.#...#.#  
  #.#####.#.#.#.#####.###.###.#.#####.#############.#####.#########.#######.#####.#.#######.#.###.###########.###.###.###  
  #.....#.#.#.#...#...#.#.#...#...#.#.....#.....#.....#.....#.....#.#.....#.#.....#.......#.........#...............#...#  
  #.###.#.#.#.#.###.#.#.###########.###.###.#.#.###.#######.#.###.#.#.###.#.#.###.###.#########.#.#########.###.#.#.#.###  
  #.#.#.#.#.#.#...#.#...#.#.#...#.#.#...#.#.#.#.#.....#.....#.#.....#...#.#.#.#...#.....#...#.#.#.....#.#.....#.#.#.#...#  
  #.#.#.###.#######.#####.#.###.#.#.#.###.###.#.#.#######.###.#########.#.#.#.#####.#.###.###.#.###.###.#.###.#####.#.#.#  
  #...#.#...#...#.#...#.............#...#.....#.#...#.....#...#.....#...#...#.#.#.#.#.....#.#.#...#.....#...#.#.#...#.#.#  
  #.#.###.#.#.###.#######.###.#####.#.#######.#.#.###.#.#####.#.###.#.#######.#.#.###.#####.#.#######.###.#####.#######.#  
  #.#.#.#.#...........#...#...#.#.........#...#.....#.#.#.#.....#.#.#.......#...#.....#.....#.#.#...#.#.........#.#.....#  
  #.#.#.#####.#.#########.###.#.#####.#####.#.###.###.###.###.#.###.#######.###.###.#####.###.#.#.#########.#.###.#######  
  #.#.....#...#.#.#.........#.#.....#.....#.#...#.#.........#.#.#.#.#...#...#.....#...............#.#.....#.#.........#.#  
  #.#.#######.###.###.#############.#.#######.###.#######.#.#.###.#.#.#.#.###.#.#######.#.#####.###.#.#######.#.#.#.###.#  
  #.#.....#.......#.#.#.#.#.#.........#.........#.#.......#.#...#.#.#.#.....#.#.#.#.....#...#...#.#.#.....#.#.#.#.#...#.#  
  #.###.#######.###.###.#.#.#.#.###.#.#######.#######.#.#.###.#.#.#.#.#.#####.###.#.#.###.#####.#.#.#.#####.###.#######.#  
  #.#...#.#.....#.#.#.........#.#.#.#...#.......#.....#.#...#.#.#...#.#.#.........#.#.#.#.....#.......#.#.....#.#...#.#.#  
  #.#####.###.#.#.#.###.#.###.###.###.#######.#####.#.###.#######.###.#.#.###.#.#####.#.#######.#.###.#.#####.###.###.#.#  
  #.#.#.......#.#.......#.#...#.......#.........#...#...#.#...#.....#.#.#.#.#.#.#...........#...#.#...........#.#.......#  
  #.#.###.#########.###.#######.###.#.#####.#.#######.#####.#.#.#.###.#####.#.#########.#####.#.#.#######.#.###.#.#####.#  
  #.....#...#.......#.....#.....#.#.#.#.#.#.#.#.#...........#.#.#...#...#.....#...#.#.#.#...#.#.#.....#...#.......#...#.#  
  ###.#######.#.#####.#######.###.###.#.#.###.#.#######.#########.###.#####.#.#.###.#.#.#.#####.###.#.###############.###  
  #.....#.....#.#.....#.#.....#.#...#.#.#...#...#.#.....#...#...#...#...#.#.#.#.#.#.#.......#.#...#.#.#.#.............#.#  
  #.#########.#.#######.#######.###.#.###.#.#.###.###.###.#.###.#.#####.#.###.#.#.#.###.#.###.#####.#.#.#.#####.#####.#.#  
  #...#.......#.#.#.#...........#.........#.#.#.#.#.......#.#...#...#.......#.........#.#.........#.#.#.#...#.#...#.....#  
  #.#.#####.#.#.#.#.###########.###.#.#####.#.#.#.#######.###.#.###.###.#########.#####.#####.#########.#.###.#.#######.#  
  #.#.#.....#.#.#...................#.#.#...#.#.#...#.......#.#.......#.....#.....#...#.#.#.....#...........#.#.#.#.#.#.#  
  ###.###.#.#######.#.###.#########.###.#.#.#.###.#.#.#########.###.#####.###.#######.#.#.#####.#.#.#.#######.#.#.#.#.###  
  #.....#.#...#.....#.#.........#.#.#.#...#.#.#...#.#.#.....#.....#.#.......#.......#.....#...#...#.#.........#.........#  
  ###.###.###.#####.#############.###.#.#.###.#.###.#.#.#.#####.#####.#######.#######.#######.###.###########.###.###.###  
  #.#.#.#...#...#...#.#.#...#...#.......#.#.....#.#.#...#.#.......#...#.....#.#...#...........#.#.........#.#.#...#.....#  
  #.#.#.#.#.#.#######.#.###.#.###.#.###.###.#####.#.#####.#####.#####.###.#.#.#.#######.#####.#.#.#.#######.#.###.#.#.#.#  
  #...#...#.#...#.................#.#.....#.#...........#...#.......#.....#.#.......#.......#...#.#.......#.....#.#.#.#.#  
  ###################################.#######.###########.#######.#.#######.###.#######.#################################  
                                     N       Y           T       Z E       Z   T       I                                   
                                     O       L           P       Z M       E   T       H                                   
""".trimIndent()

    println("Number of steps to get through is "+Day20(input).findStepsToEscape())
}

class Day20(input: String) {
    private val lines = input.lines()

    open class Point(val x: Int, val y: Int) {
        fun adjacents(): Set<Point> {
            return mutableSetOf<Point>().apply {
                add(Point(x, y-1))
                add(Point(x, y+1))
                add(Point(x+1, y))
                add(Point(x-1, y))
            }
        }

        override fun equals(other: Any?): Boolean {
            return if (other is Point) {
                x == other.x && y == other.y
            } else {
                false
            }
        }

        override fun hashCode(): Int {
            return x * 31000 + y
        }
    }

    class Portal(x: Int, y: Int, val name: String) : Point(x, y)

    fun findStepsToEscape(): Int {
        val tunnelNodes = mutableListOf<Point>()
        val portals = mutableListOf<Portal>()
        for (lineIndex in lines.dropLast(1).indices) {
            val line = lines[lineIndex]
            for (charIndex in line.dropLast(1).indices) {
                when (line[charIndex]) {
                    in 'A'..'Z' -> {
                        if (line[charIndex + 1] in 'A'..'Z') {
                            var portalEntrance = 0
                            val portalName = line[charIndex].toString() + line[charIndex + 1]
                            if (charIndex == 0) {
                                portalEntrance = 1
                            } else {
                                if (line[charIndex - 1] == '.') {
                                    portalEntrance = charIndex
                                } else if (line[charIndex + 2] == '.')
                                    portalEntrance = charIndex + 1
                            }
                            portals.add(Portal(portalEntrance, lineIndex, portalName))
                        } else if (lines[lineIndex+1][charIndex] in 'A'..'Z') {
                            var portalEntrance = 0
                            val portalName = line[charIndex].toString() + lines[lineIndex+1][charIndex]
                            if (lineIndex == 0) {
                                portalEntrance = 1
                            } else {
                                if (lines[lineIndex-1][charIndex] == '.') {
                                    portalEntrance = lineIndex
                                } else if (lines[lineIndex+2][charIndex] == '.'){
                                    portalEntrance = lineIndex + 1
                                }
                            }
                            portals.add(Portal(charIndex, portalEntrance, portalName))
                        }
                    }
                    '.' -> tunnelNodes.add(Point(charIndex, lineIndex))
                }
            }
        }

        val graph = DefaultUndirectedWeightedGraph<Point, DefaultWeightedEdge>(DefaultWeightedEdge::class.java)
        for (node in tunnelNodes) {
            graph.addVertex(node)
            node.adjacents().stream().filter { tunnelNodes.contains(it) }.forEach {
                graph.addVertex(it)
                graph.addEdge(node, it)?.apply {
                    graph.setEdgeWeight(this, 1.0)
                }
            }
        }

        for (portal in portals) {
            graph.addVertex(portal)
            portal.adjacents().stream().filter { tunnelNodes.contains(it) }.forEach {
                graph.addEdge(portal, it)?.apply {
                    graph.setEdgeWeight(this, 0.0)
                }
            }
        }

        portals.groupBy { it.name }
            .filter { it.value.size == 2 }
            .forEach { (key, list) ->
                graph.addEdge(list.first(), list.last())?.apply {
                    graph.setEdgeWeight(this, 1.0)
                }
            }

        return DijkstraShortestPath<Point, DefaultWeightedEdge>(graph)
            .getPath(portals.first {
                it.name == "AA"
            }, portals.first {
                it.name == "ZZ"
            })
            .weight.toInt()

    }

}